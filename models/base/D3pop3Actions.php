<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace d3yii2\d3pop3\models\base;

use Yii;
use yii\db\Exception;

/**
 * This is the base-model class for table "d3pop3_actions".
 *
 * @property string $id
 * @property integer $connecting_setting_id
 * @property string $time
 * @property string $type
 * @property string $notes
 *
 * @property \d3yii2\d3pop3\models\D3pop3ConnectingSetting $connectingSetting
 * @property string $aliasModel
 */
abstract class D3pop3Actions extends \yii\db\ActiveRecord
{



    /**
    * ENUM field values
    */
    const TYPE_CREATED_ACCOUNT = 'Created account';
    const TYPE_UPDATED_ACCOUNT = 'Updated account';
    const TYPE_READ = 'Read';
    const TYPE_ERROR = 'Error';
    var $enum_labels = false;
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'd3pop3_actions';
    }


    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['connecting_setting_id', 'type'], 'required'],
            [['connecting_setting_id'], 'integer'],
            [['time'], 'safe'],
            [['type', 'notes'], 'string'],
            [['connecting_setting_id'], 'exist', 'skipOnError' => true, 'targetClass' => \d3yii2\d3pop3\models\D3pop3ConnectingSettings::className(), 'targetAttribute' => ['connecting_setting_id' => 'id']],
            ['type', 'in', 'range' => [
                    self::TYPE_CREATED_ACCOUNT,
                    self::TYPE_UPDATED_ACCOUNT,
                    self::TYPE_READ,
                    self::TYPE_ERROR,
                ]
            ]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('d3pop3', 'ID'),
            'connecting_setting_id' => Yii::t('d3pop3', 'Connecting'),
            'time' => Yii::t('d3pop3', 'Time'),
            'type' => Yii::t('d3pop3', 'Type'),
            'notes' => Yii::t('d3pop3', 'Notes'),
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeHints()
    {
        return array_merge(parent::attributeHints(), [
            'connecting_setting_id' => Yii::t('d3pop3', 'Connecting'),
            'time' => Yii::t('d3pop3', 'Time'),
            'type' => Yii::t('d3pop3', 'Type'),
            'notes' => Yii::t('d3pop3', 'Notes'),
        ]);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getConnectingSetting()
    {
        return $this->hasOne(\d3yii2\d3pop3\models\D3pop3ConnectingSetting::className(), ['id' => 'connecting_setting_id']);
    }





    /**
     * get column type enum value label
     * @param string $value
     * @return string
     */
    public static function getTypeValueLabel($value){
        $labels = self::optsType();
        if(isset($labels[$value])){
            return $labels[$value];
        }
        return $value;
    }

    /**
     * column type ENUM value labels
     * @return array
     */
    public static function optsType()
    {
        return [
            self::TYPE_CREATED_ACCOUNT => Yii::t('d3pop3', self::TYPE_CREATED_ACCOUNT),
            self::TYPE_UPDATED_ACCOUNT => Yii::t('d3pop3', self::TYPE_UPDATED_ACCOUNT),
            self::TYPE_READ => Yii::t('d3pop3', self::TYPE_READ),
            self::TYPE_ERROR => Yii::t('d3pop3', self::TYPE_ERROR),
        ];
    }
    public function saveOrException($runValidation = true, $attributeNames = null)
    {
        if(!parent::save($runValidation, $attributeNames)){
            throw new Exception(json_encode($this->getErrors()));
        }
    }
}
